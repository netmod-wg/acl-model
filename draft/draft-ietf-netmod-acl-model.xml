<?xml version="1.0" encoding="US-ASCII"?>
<!-- This is built from a template for a generic Internet Draft. Suggestions for
     improvement welcome - write to Brian Carpenter, brian.e.carpenter @ gmail.com -->
<!-- This can be converted using the Web service at http://xml.resource.org/experimental.html
     (which supports the latest, sometimes undocumented and under-tested, features.) -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<!-- You want a table of contents -->
<?rfc symrefs="yes"?>
<!-- Use symbolic labels for references -->
<?rfc sortrefs="yes"?>
<!-- This sorts the references -->
<?rfc iprnotified="no" ?>
<!-- Change to "yes" if someone has disclosed IPR for the draft -->
<?rfc compact="yes"?>
<!-- This defines the specific filename and version number of your draft (and inserts the appropriate IETF boilerplate -->
<rfc category="std" docName="draft-ietf-netmod-acl-model-15" ipr="trust200902">
  <front>
    <title abbrev="ACL YANG model">Network Access Control List (ACL) YANG Data
    Model</title>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization/>

      <address>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <author fullname="Lisa Huang" initials="L." surname="Huang">
      <organization>General Electric</organization>

      <address>
        <email>lyihuang16@gmail.com</email>
      </address>
    </author>

    <author fullname="Sonal Agarwal" initials="S." surname="Agarwal">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <email>sagarwal12@gmail.com</email>
      </address>
    </author>

    <author fullname="Dana Blair" initials="D." surname="Blair">
      <organization>Cisco Systems, INc</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>dblair@cisco.com</email>

        <uri/>
      </address>
    </author>

    <date day="16" month="January" year="2018"/>

    <area>Operations and Management Area</area>

    <workgroup>NETMOD WG</workgroup>

    <abstract>
      <t>This document describes a data model of Access Control List (ACL)
      basic building blocks.</t>

      <t>Editorial Note (To be removed by RFC Editor)</t>

      <t>This draft contains many placeholder values that need to be replaced
      with finalized values at the time of publication. This note summarizes
      all of the substitutions that are needed. Please note that no other RFC
      Editor instructions are specified anywhere else in this document.</t>

      <t>Artwork in this document contains shorthand references to drafts in
      progress. Please apply the following replacements</t>

      <t><list style="symbols">
          <t>"XXXX" --&gt; the assigned RFC value for this draft both in this
          draft and in the YANG models under the revision statement.</t>

          <t>Revision date in model needs to get updated with the date the
          draft gets approved. The date also needs to get reflected on the
          line with &lt;CODE BEGINS&gt;.</t>
        </list></t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>Access Control List (ACL) is one of the basic elements used to
      configure device forwarding behavior. It is used in many networking
      technologies such as Policy Based Routing, Firewalls etc.</t>

      <t>An ACL is an ordered-by-user set of rules that is used to filter
      traffic on a networking device. Each rule is represented by an Access
      Control Entry (ACE).</t>

      <t>Each ACE has a group of match criteria and a group of action
      criteria.</t>

      <t>The match criteria consist of a tuple of packet header match criteria
      and can have metadata match criteria as well.</t>

      <t><list style="symbols">
          <t>Packet header matches apply to fields visible in the packet such
          as address or class of service or port numbers.</t>

          <t>In case vendor supports it, metadata matches apply to fields
          associated with the packet but not in the packet header such as
          input interface or overall packet length</t>
        </list></t>

      <t>The actions specify what to do with the packet when the matching
      criteria is met. These actions are any operations that would apply to
      the packet, such as counting, policing, or simply forwarding.The list of
      potential actions is endless depending on the capabilities of the
      networked devices.</t>

      <t>Access Control List is also widely knowns as ACL (pronounce as [ak-uh
      l]) or Access List. In this document, Access Control List, ACL and
      Access List are used interchangeably.</t>

      <t>The matching of filters and actions in an ACE/ACL are triggered only
      after application/attachment of the ACL to an interface, VRF, vty/tty
      session, QoS policy, routing protocols amongst various other config
      attachment points. Once attached, it is used for filtering traffic using
      the match criteria in the ACE's and taking appropriate action(s) that
      have been configured against that ACE. In order to apply an ACL to any
      attachment point other than an interface, vendors would have to augment
      the ACL YANG model.</t>

      <section title="Definitions and Acronyms">
        <t>ACE: Access Control Entry</t>

        <t>ACL: Access Control List</t>

        <t>DSCP: Differentiated Services Code Point</t>

        <t>ICMP: Internet Control Message Protocol</t>

        <t>IP: Internet Protocol</t>

        <t>IPv4: Internet Protocol version 4</t>

        <t>IPv6: Internet Protocol version 6</t>

        <t>MAC: Media Access Control</t>

        <t>TCP: Transmission Control Protocol</t>
      </section>

      <!-- definitions -->
    </section>

    <!-- intro -->

    <section anchor="problem" title="Problem Statement">
      <t>This document defines a <xref target="RFC6020">YANG</xref> data model
      for the configuration of ACLs. It is very important that model can be
      used easily by applications/attachments.</t>

      <t>ACL implementations in every device may vary greatly in terms of the
      filter constructs and actions that they support. Therefore this draft
      proposes a model that can be augmented by standard extensions and vendor
      proprietary models.</t>
    </section>

    <!-- problem -->

    <section anchor="design" title="Understanding ACL's Filters and Actions">
      <t>Although different vendors have different ACL data models, there is a
      common understanding of what Access Control List (ACL) is. A network
      system usually have a list of ACLs, and each ACL contains an ordered
      list of rules, also known as Access Control Entries (ACE). Each ACE has
      a group of match criteria and a group of action criteria. The match
      criteria consist of packet header matching. It as also possible for ACE
      to match on metadata, if supported by the vendor. Packet header matching
      applies to fields visible in the packet such as address or class of
      service or port numbers. Metadata matching applies to fields associated
      with the packet, but not in the packet header such as input interface,
      packet length, or source or destination prefix length. The actions can
      be any sort of operation from logging to rate limiting or dropping to
      simply forwarding. Actions on the first matching ACE are applied with no
      processing of subsequent ACEs.</t>

      <t>The model also includes a container to hold overall operational state
      for each ACL and operational state for each ACE. One ACL can be applied
      to multiple targets within the device, such as interfaces of a networked
      device, applications or features running in the device, etc. When
      applied to interfaces of a networked device, the ACL is applied in a
      direction which indicates if it should be applied to packet entering
      (input) or leaving the device (output). An example in the appendix shows
      how to express it in YANG model.</t>

      <t>This draft tries to address the commonalities between all vendors and
      create a common model, which can be augmented with proprietary models.
      The base model is simple and with this design we hope to achieve enough
      flexibility for each vendor to extend the base model.</t>

      <t>The use of feature statements in the model allows vendors to
      advertise match rules they are capable and willing to support. There are
      two sets of feature statements a device needs to advertise. The first
      set of feature statements specify the capability of the device. These
      include features such as "Device can support ethernet headers" or
      "Device can support of IPv4 headers". The second set of feature
      statements specify the combinations of headers the device is willing to
      support. These include features such as "Plain IPv6 ACL supported" or
      "Ethernet, IPv4 and IPv6 ACL combinations supported".</t>

      <section anchor="aclmodules" title="ACL Modules">
        <t>There are two YANG modules in the model. The first module,
        "ietf-access-control-list", defines generic ACL aspects which are
        common to all ACLs regardless of their type or vendor. In effect, the
        module can be viewed as providing a generic ACL "superclass". It
        imports the second module, "ietf-packet-fields". The match container
        in "ietf-access-control-list" uses groupings in "ietf-packet-fields"
        to specify match fields such as port numbers or protocol. The
        combination of if-feature checks and must statements allow for the
        selection of relevant match fields that a user can define rules
        for.</t>

        <t>If there is a need to define new "matches" choice, such as <xref
        target="RFC5101">IPFIX</xref>, the container "matches" can be
        augmented.</t>

        <t>For a reference to the annotations used in the diagram below, see
        <xref target="I-D.ietf-netmod-yang-tree-diagrams">YANG Tree
        Diagrams</xref>.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/ietf-access-control-list@YYYY-MM-DD-tree.txt)
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="yangmodel" title="ACL YANG Models">
      <section anchor="ietfacl" title="IETF Access Control List module">
        <t>"ietf-access-control-list" is the standard top level module for
        access lists. The "access-lists" container stores a list of "acl".
        Each "acl" has information identifying the access list by a name
        ("name") and a list ("aces") of rules associated with the "name". Each
        of the entries in the list ("aces"), indexed by the string "name", has
        containers defining "matches" and "actions".</t>

        <t>The model defines several ACL types and actions in the form of
        identities and features. Features are used by implementors to select
        the ACL types the system can support and identities are used to
        validate the types that have been selected. These types are implicitly
        inherited by the "ace", thus safeguarding against misconfiguration of
        "ace" types in an "acl".</t>

        <t>The "matches" define criteria used to identify patterns in
        "ietf-packet-fields". The choice statements within the match container
        allow for selection of one header within each of "l2", "l3", or "l4"
        headers. The "actions" define behavior to undertake once a "match" has
        been identified. In addition to permit and deny for actions, a logging
        option allows for a match to be logged that can be used to determine
        which rule was matched upon. The model also defines the ability for
        ACL's to be attached to a particular interface.</t>

        <t>Statistics in the ACL can be collected for an "ace" or for an
        "interface". The feature statements defined for statistics can be used
        to determine whether statistics are being collected per "ace", or per
        "interface".</t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-access-control-list@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(../src/yang/ietf-access-control-list@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
        </figure>
      </section>

      <!---->

      <section anchor="pktheaders" title="IETF Packet Fields module">
        <t>The packet fields module defines the necessary groups for matching
        on fields in the packet including ethernet, ipv4, ipv6, and transport
        layer fields. The "type" node determines which of these fields get
        included for any given ACL with the exception of TCP, UDP and ICMP
        header fields. Those fields can be used in conjunction with any of the
        above layer 2 or layer 3 fields.</t>

        <t>Since the number of match criteria is very large, the base draft
        does not include these directly but references them by "uses" to keep
        the base module simple. In case more match conditions are needed,
        those can be added by augmenting choices within container "matches" in
        ietf-access-control-list.yang model.</t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-packet-fields@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(../src/yang/ietf-packet-fields@YYYY-MM-DD.yang)

<CODE ENDS>      ]]></artwork>
        </figure>
      </section>

      <!--pktheaders-->

      <section anchor="example" title="An ACL Example">
        <t>Requirement: Deny tcp traffic from 10.10.10.1/24, destined to
        11.11.11.1/24.</t>

        <t>Here is the acl configuration xml for this Access Control List:</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-acl-configuration.xml)

]]></artwork>
        </figure>

        <t>The acl and aces can be described in CLI as the following:</t>

        <figure>
          <artwork><![CDATA[
      access-list ipv4 sample-ipv4-acl
      deny tcp 10.10.10.1/24 11.11.11.1/24
]]></artwork>
        </figure>
      </section>

      <section anchor="portrange" title="Port Range Usage Example">
        <t>When a lower-port and an upper-port are both present, it represents
        a range between lower-port and upper-port with both the lower-port and
        upper-port are included. When only a lower-port presents, it
        represents a single port.</t>

        <t>With the follow XML snippet:</t>

        <figure>
          <artwork><![CDATA[
     <source-port-range-or-operator>
       <port-range-or-operator>
         <range>
           <lower-port>16384</lower-port>
           <upper-port>16387</upper-port>
         </range>
       </port-range-or-operator>
     <source-port-range-or-operator>
  ]]></artwork>
        </figure>

        <t>This represents source ports 16384, 16385, 16386, and 16387.</t>

        <t>With the follow XML snippet:</t>

        <figure>
          <artwork><![CDATA[
      <source-port-range-or-operator>
        <port-range-or-operator>
          <range>
            <lower-port>16384</lower-port>
            <upper-port>65535</upper-port>
          </range>
        </port-range-or-operator>
      </source-port-range-or-operator>
 ]]></artwork>
        </figure>

        <t>This represents source ports greater than or equal to 16384 and
        less than equal to 65535.</t>

        <t>With the follow XML snippet:</t>

        <figure>
          <artwork><![CDATA[
      <source-port-range-or-operator>
        <port-range-or-operator>
          <operator>
            <operator>eq</operator>
            <port>21</port>
          </operator>
        </port-range-or-operator>
      </source-port-range-or-operator>
   ]]></artwork>
        </figure>

        <t>This represents port 21.</t>

        <t>With the following XML snippet, the configuration is specifying all
        ports that are not equal to 21.</t>

        <figure>
          <artwork><![CDATA[
      <source-port-range-or-operator>
        <port-range-or-operator>
          <operator>
            <operator>neq</operator>
            <port>21</port>
          </operator>
        </port-range-or-operator>
      </source-port-range-or-operator>

]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>The YANG module defined in this memo is designed to be accessed via
      the <xref target="RFC6241">NETCONF </xref>. The lowest NETCONF layer is
      the secure transport layer and the mandatory-to-implement secure
      transport is <xref target="RFC6242">SSH</xref>. The NETCONF Access
      Control Model ( <xref target="RFC6536">NACM</xref>) provides the means
      to restrict access for particular NETCONF users to a pre-configured
      subset of all available NETCONF protocol operations and content.</t>

      <t>There are a number of data nodes defined in the YANG module which are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., &lt;edit-config&gt;) to
      these data nodes without proper protection can have a negative effect on
      network operations.</t>

      <t>These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t>/access-lists/acl/aces: This list specifies all the configured access
      control entries on the device. Unauthorized write access to this list
      can allow intruders to access and control the system. Unauthorized read
      access to this list can allow intruders to spoof packets with authorized
      addresses thereby compromising the system.</t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>This document registers a URI in the <xref target="RFC3688">IETF XML
      registry </xref>. Following the format in RFC 3688, the following
      registration is requested to be made:</t>

      <t>URI: urn:ietf:params:xml:ns:yang:ietf-access-control-list</t>

      <t>URI: urn:ietf:params:xml:ns:yang:ietf-packet-fields</t>

      <t>Registrant Contact: The IESG.</t>

      <t>XML: N/A, the requested URI is an XML namespace.</t>

      <t>This document registers a YANG module in the YANG Module Names
      registry [RFC6020].</t>

      <t>name: ietf-access-control-list namespace:
      urn:ietf:params:xml:ns:yang:ietf-access-control-list prefix: ietf-acl
      reference: RFC XXXX</t>

      <t>name: ietf-packet-fields namespace:
      urn:ietf:params:xml:ns:yang:ietf-packet-fields prefix:
      ietf-packet-fields reference: RFC XXXX</t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Alex Clemm, Andy Bierman and Lisa Huang started it by sketching out
      an initial IETF draft in several past IETF meetings. That draft included
      an ACL YANG model structure and a rich set of match filters, and
      acknowledged contributions by Louis Fourie, Dana Blair, Tula Kraiser,
      Patrick Gili, George Serpa, Martin Bjorklund, Kent Watsen, and Phil
      Shafer. Many people have reviewed the various earlier drafts that made
      the draft went into IETF charter.</t>

      <t>Dean Bogdanovic, Kiran Agrahara Sreenivasa, Lisa Huang, and Dana
      Blair each evaluated the YANG model in previous drafts separately, and
      then worked together to created a ACL draft that was supported by
      different vendors. That draft removed vendor specific features, and gave
      examples to allow vendors to extend in their own proprietary ACL. The
      earlier draft was superseded with this updated draft and received more
      participation from many vendors.</t>

      <t>Authors would like to thank Jason Sterne, Lada Lhotka, Juergen
      Schoenwalder, David Bannister, Jeff Haas, Kristian Larsson and Einar
      Nilsen-Nygaard for their review of and suggestions to the draft.</t>
    </section>

    <section title="Open Issues">
      <t><list style="symbols">
          <t>The current model does not support the concept of "containers"
          used to contain multiple addresses per rule entry.</t>
        </list></t>
    </section>

    <!---->
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.6020'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.6536'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.5101'?>

      <?rfc include='reference.I-D.ietf-netmod-yang-tree-diagrams'?>
    </references>

    <section anchor="app-additional" title="Extending ACL model examples">
      <!--routeacl-->

      <section anchor="newcoacl" title="A company proprietary module example">
        <t>Module "example-newco-acl" is an example of company proprietary
        model that augments "ietf-acl" module. It shows how to use 'augment'
        with an XPath expression to add additional match criteria, action
        criteria, and default actions when no ACE matches found. All these are
        company proprietary extensions or system feature extensions.
        "example-newco-acl" is just an example and it is expected from vendors
        to create their own proprietary models.</t>

        <t>The following figure is the tree structure of example-newco-acl. In
        this example,
        /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:aces/ietf-acl:ace/ietf-acl:matches
        are augmented with two new choices, protocol-payload-choice and
        metadata. The protocol-payload-choice uses a grouping with an
        enumeration of all supported protocol values. Metadata matches apply
        to fields associated with the packet but not in the packet header such
        as overall packet length. In other example,
        /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:aces/ietf-acl:ace/ietf-acl:actions
        are augmented with new choice of actions.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-newco-acl@YYYY-MM-DD-tree.txt)  
          ]]></artwork>
        </figure>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-newco-acl@YYYY-MM-DD.yang)  

]]></artwork>
        </figure>

        <t>Draft authors expect that different vendors will provide their own
        yang models as in the example above, which is the augmentation of the
        base model</t>
      </section>

      <section title="Linux nftables">
        <t>As Linux platform is becoming more popular as networking platform,
        the Linux data model is changing. Previously ACLs in Linux were highly
        protocol specific and different utilities were used (iptables,
        ip6tables, arptables, ebtables), so each one had separate data model.
        Recently, this has changed and a single utility, nftables, has been
        developed. With a single application, it has a single data model for
        filewall filters and it follows very similarly to the
        ietf-access-control list module proposed in this draft. The nftables
        support input and output ACEs and each ACE can be defined with match
        and action.</t>

        <t>The example in <xref target="example"/> can be configured using
        nftable tool as below.</t>

        <figure>
          <artwork><![CDATA[
      nft add table ip filter
      nft add chain filter input
      nft add rule ip filter input ip protocol tcp ip saddr \
          10.10.10.1/24 drop
      ]]></artwork>
        </figure>

        <t>The configuration entries added in nftable would be.</t>

        <figure>
          <artwork><![CDATA[
      table ip filter {
        chain input {
          ip protocol tcp ip saddr 10.10.10.1/24 drop 
        }
      }

]]></artwork>
        </figure>

        <t>We can see that there are many similarities between Linux nftables
        and IETF ACL YANG data models and its extension models. It should be
        fairly easy to do translation between ACL YANG model described in this
        draft and Linux nftables.</t>
      </section>

      <section title="Ethertypes">
        <t>The ACL module is dependent on the definition of ethertypes. IEEE
        owns the allocation of those ethertypes. This model is being included
        here to enable definition of those types till such time that IEEE
        takes up the task of publication of the model that defines those
        ethertypes. At that time, this model can be deprecated.</t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-ethertypes@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(../src/yang/ietf-ethertypes@YYYY-MM-DD.yang)  

<CODE ENDS>]]></artwork>
        </figure>
      </section>
    </section>
  </back>
</rfc>
